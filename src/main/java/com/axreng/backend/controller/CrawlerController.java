package com.axreng.backend.controller;

import com.axreng.backend.exception.NotFoundException;
import com.axreng.backend.service.CrawlerService;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import spark.Request;
import spark.Response;

import java.util.logging.Logger;

import static com.axreng.backend.constants.Constants.KEYWORD_ERROR_MESSAGE;
import static com.axreng.backend.utils.Utils.*;
import static spark.Spark.*;

public class CrawlerController {

    private static final Logger log = Logger.getLogger(CrawlerService.class.getName());

    private CrawlerService crawlerService;

    public CrawlerController(CrawlerService crawlerService) {
        this.crawlerService = crawlerService;
    }

    public String badRequestIdMessage = "The ID generated by the search must be sended in the path with 8 characters";

    public void setupRoutes() {
        log.info("Setting up routes");

        before((req, res) -> res.type("application/json"));

        path("/crawl", () -> {

            get("/:id", (req, res) -> getById(req, res));

            post("", (req, res) -> postCrawler(req, res));
        });

        log.info("Routes ON");

    }

    public String postCrawler(Request request, Response response) {

        try {
            log.info("POST - Posting new request");

            JsonObject jsonObject = getJsonObject(request);
            String keyword = crawlerService.getValidKeyword(jsonObject);

            return gson.toJson(crawlerService.post(keyword));

        } catch (IllegalArgumentException e){
            log.warning(e.getMessage());
            return setErrorResponse(400,  response, e.getMessage());

        } catch (Exception e){
            log.severe(e.getMessage());
            return setErrorResponse(500,  response, "Internal Server Error");
        }

    }

    public String getById(Request req, Response response) {

        log.info("GET - Getting search results");

        try {

            String id = req.params("id");

            if(id == null || id.isBlank() || id.length() != 8){
                log.warning("GET - " + badRequestIdMessage);
                return setErrorResponse(400,  response, badRequestIdMessage);
            }

            return crawlerService.get(req.params("id"));

        } catch (NotFoundException e){
            return setErrorResponse(404, response, e.getMessage());
        }

    }

    public static JsonObject getJsonObject(Request request) {

        String contentType = request.contentType();

        if (contentType == null || !contentType.startsWith("application/json")) {
            throw new IllegalArgumentException("Content-Type must be application/json");
        }

        String requestBody = request.body();

        if(requestBody != null && !requestBody.isBlank())
            return JsonParser.parseString(requestBody).getAsJsonObject();
        else
            return null;
    }

}